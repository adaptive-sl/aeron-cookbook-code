/*
 * Copyright 2019 Shaun Laurens
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'
}

defaultTasks 'clean', 'build', 'test'

def AGRONA_VERSION = '1.1.0'
def CHECKSTYLE_VERSION = '8.27'
def JUPITER_VERSION = '5.5.2'
def AERON_VERSION = '1.24.0'
def SBE_VERSION = '1.15.0'

def cookbookSampleGroup = 'com.aeroncookbook'
def cookbookSampleVersion = '0.1-SNAPSHOT'
def cookbookSampleJavaVersion = JavaVersion.VERSION_11

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'

    group cookbookSampleGroup
    version cookbookSampleVersion

    compileJava {
        sourceCompatibility = 11
        targetCompatibility = 11
        options.compilerArgs << '-XDignore.symbol.file' // Suppress warnings about using Unsafe
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    compileTestJava {
        sourceCompatibility = cookbookSampleJavaVersion
        targetCompatibility = cookbookSampleJavaVersion
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation group: 'org.agrona', name: 'agrona', version: AGRONA_VERSION
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
        implementation group: 'io.aeron', name: 'aeron-all', version: AERON_VERSION
        implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
        checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: CHECKSTYLE_VERSION
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: JUPITER_VERSION
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: JUPITER_VERSION
    }

    tasks.withType(Checkstyle) {
        checkstyle {
            configFile = "${rootDir}/config/checks.xml" as File
            configProperties = ["suppressionFile": "${rootDir}/config/suppressions.xml"]
            toolVersion = CHECKSTYLE_VERSION
        }
    }

    test {
        useJUnitPlatform()
        jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
        jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED')

        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

project('ipc-core') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
}

project('archive-core') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
}

project('cluster-core') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
}

project(':sbe-protocol') {

    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated.java.srcDir generatedDir
    }

    dependencies {
        implementation "org.agrona:agrona:${AGRONA_VERSION}"
        implementation "uk.co.real-logic:sbe-tool:${SBE_VERSION}"
        testImplementation sourceSets.generated.output
    }

    compileGeneratedJava {
        dependsOn 'generateMessages'
        sourceCompatibility = cookbookSampleJavaVersion
        targetCompatibility = cookbookSampleJavaVersion
        options.deprecation = true
        classpath += sourceSets.main.runtimeClasspath
    }

    task generateMessages(type: JavaExec) {
        main = 'uk.co.real_logic.sbe.SbeTool'
        classpath = sourceSets.main.runtimeClasspath
        systemProperties('sbe.output.dir': generatedDir,
                'sbe.target.language': 'Java',
                'sbe.validation.stop.on.error': 'true',
                'sbe.validation.xsd': 'src/main/resources/sbe/sbe.xsd')
        args = [
                'src/main/resources/messages.xml'
        ]
    }

    jar.dependsOn compileGeneratedJava
}

project('sbe-core') {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    dependencies {
        implementation project(path: ':sbe-protocol')
    }

    idea {
        dependencies {
            implementation project(':sbe-protocol').sourceSets.generated.output
        }
    }
}

wrapper {
    gradleVersion = '6.0.1'
    distributionType = 'ALL'
}